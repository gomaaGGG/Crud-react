{"version":3,"sources":["components/Courseform.js","components/courselist.js","App.js","serviceWorker.js","index.js"],"names":["Courseform","props","onSubmit","addcourse","type","onChange","updatefunction","value","cureent","Courselist","state","isEdit","newValue","rendercourse","details","name","onClick","toggleform","deletecourse","index","setState","updatecourseitem","e","preventDefault","Editcourse","renderformupdate","target","defaultValue","this","Component","App","courses","push","splice","courselist","length","map","course","key","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAYeA,EAVI,SAACC,GAClB,OAEI,0BAAMC,SAAUD,EAAME,WACpB,2BAAOC,KAAK,OAAOC,SAAUJ,EAAMK,eAAgBC,MAAON,EAAMO,UAChE,4BAAQJ,KAAK,UAAb,iBCgDOK,E,2MApDbC,MAAQ,CACNC,QAAQ,EACRC,SAAU,I,EAGZC,aAAe,WACb,OACE,4BACE,kCAAQ,EAAKZ,MAAMa,QAAQC,MAC3B,4BAAQC,QAAS,WAAK,EAAKC,eAA3B,gBACA,4BACED,QAAS,WACP,EAAKf,MAAMiB,aAAa,EAAKjB,MAAMkB,SAFvC,mB,EAWNF,WAAW,WACb,IAAIN,EAAO,EAAKD,MAAMC,OACtB,EAAKS,SAAS,CACdT,QAAQA,K,EAMRU,iBAAkB,SAACC,GACnBA,EAAEC,iBACF,EAAKtB,MAAMuB,WAAW,EAAKvB,MAAMkB,MAAM,EAAKT,MAAME,UAClD,EAAKK,c,EAKHQ,iBAAmB,WACjB,OACE,0BAAMvB,SAAU,EAAKmB,kBACnB,2BAAOjB,KAAK,OAAOC,SAAW,SAACiB,GAAD,OAAK,EAAKF,SAAS,CAACR,SAASU,EAAEI,OAAOnB,SAASoB,aAAc,EAAK1B,MAAMa,QAAQC,OAC9G,oD,wEAKF,IAAIJ,EAAOiB,KAAKlB,MAAMC,OACxB,OAAO,kBAAC,WAAD,SAAYA,EAAQiB,KAAKH,mBAAqBG,KAAKf,oB,GAjDrCgB,aCkEVC,E,2MA/DbpB,MAAQ,CACNqB,QAAS,CAAC,CAAEhB,KAAM,QAAU,CAAEA,KAAM,OAAS,CAAEA,KAAM,WACrDP,QAAS,I,EAKXF,eAAiB,SAAAgB,GAEf,EAAKF,SAAS,CAAEZ,QAASc,EAAEI,OAAOnB,S,EAGpCJ,UAAY,SAAAmB,GACVA,EAAEC,iBAEF,IAAIf,EAAU,EAAKE,MAAMF,QACrBuB,EAAU,EAAKrB,MAAMqB,QACzB,GAAc,KAAVvB,EACJ,OAAO,EAEPuB,EAAQC,KAAK,CAACjB,KAAOP,IACrB,EAAKY,SAAS,CAAEW,UAAQvB,QAAQ,M,EAMpCU,aAAa,SAACC,GACd,IAAIY,EAAQ,EAAKrB,MAAMqB,QACvBA,EAAQE,OAAOd,EAAM,GACrB,EAAKC,SAAS,CAACW,QAAQA,K,EAGvBP,WAAY,SAACL,EAAMZ,GAEnB,IAAIwB,EAAQ,EAAKrB,MAAMqB,QACZA,EAAQZ,GACb,KAASZ,EAEf,EAAKa,SAAS,CAACW,a,wEAIH,IAAD,OACDA,EAAUH,KAAKlB,MAAMqB,QAErBG,EADIH,EAAQI,OACKJ,EAAQK,KAAI,SAACC,EAAQlB,GAC1C,OAAO,kBAAC,EAAD,CAAYL,QAASuB,EAAQC,IAAKnB,EAAQA,MAAOA,EAAOD,aAAc,EAAKA,aAAeM,WAAY,EAAKA,gBAChH,wDAEJ,OACE,6BAASe,UAAU,OACjB,2CACA,kBAAC,EAAD,CACEjC,eAAgBsB,KAAKtB,eACrBH,UAAWyB,KAAKzB,UAAWK,QAASoB,KAAKlB,MAAMF,UAEjD,4BAAK0B,Q,GA1DKL,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5c429869.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Courseform = (props) => {\r\n  return (\r\n    \r\n      <form onSubmit={props.addcourse}>\r\n        <input type=\"text\" onChange={props.updatefunction} value={props.cureent}></input>\r\n        <button type=\"submit\"> ADD course</button>\r\n      </form>\r\n  );\r\n};\r\n\r\nexport default Courseform;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nclass Courselist extends Component {\r\n  state = {\r\n    isEdit: false,\r\n    newValue: '',\r\n  };\r\n\r\n  rendercourse = () => {\r\n    return (\r\n      <li>\r\n        <span> {this.props.details.name}</span>\r\n        <button onClick={()=>{this.toggleform()}}>Edit course </button>\r\n        <button\r\n          onClick={() => {\r\n            this.props.deletecourse(this.props.index);\r\n          }}\r\n        >\r\n          Delete course\r\n        </button>\r\n      </li>\r\n    );\r\n  };\r\n  // toggle form\r\n  toggleform=()=>{\r\nlet isEdit=this.state.isEdit;\r\nthis.setState({\r\nisEdit:!isEdit\r\n\r\n})\r\n\r\n  }\r\n\r\nupdatecourseitem= (e) =>{\r\ne.preventDefault();\r\nthis.props.Editcourse(this.props.index,this.state.newValue);\r\nthis.toggleform();\r\n\r\n\r\n  }\r\n\r\n  renderformupdate = () => {\r\n    return (\r\n      <form onSubmit={this.updatecourseitem}>\r\n        <input type=\"text\" onChange={ (e)=>this.setState({newValue:e.target.value})} defaultValue={this.props.details.name}></input>\r\n        <button  >Update course </button>\r\n      </form>\r\n    );\r\n  };\r\n  render() {\r\n      let isEdit=this.state.isEdit;\r\n    return <Fragment> {isEdit?(this.renderformupdate()):(this.rendercourse())}</Fragment>;\r\n  }\r\n}\r\n\r\nexport default Courselist;\r\n","import React, { Component } from \"react\";\nimport Courseform from \"./components//Courseform\";\nimport Courselist from \"./components//courselist\";\n\nclass App extends Component {\n  state = {\n    courses: [{ name: \"html\" }, { name: \"css\" }, { name: \"jquery\" }],\n    cureent: ''\n  };\n\n  //update functiion to take any change in input\n\n  updatefunction = e => {\n    //console.log(e.target.value);\n    this.setState({ cureent: e.target.value });\n  };\n  //add course\n  addcourse = e => {\n    e.preventDefault();\n    //console.log(\"course added \")\n    let cureent = this.state.cureent;\n    let courses = this.state.courses;\n    if (cureent==='')\n    return false \n    else {\n    courses.push({name : cureent});\n    this.setState({ courses,cureent:'' }) }\n    \n  };\n\n  //delete course \n\ndeletecourse=(index)=>{\nlet courses=this.state.courses;\ncourses.splice(index,1);\nthis.setState({courses:courses})\n  }\n\nEditcourse =(index,value) =>{\n\nlet courses=this.state.courses;\nlet course=courses[index];\ncourse['name']=value;\n\nthis.setState({courses})\n\n  }\n\n  render() {\n    const courses = this.state.courses;\n    const len=courses.length;\n    const courselist = len?courses.map((course, index) => {\n      return <Courselist details={course} key={index}  index={index} deletecourse={this.deletecourse}  Editcourse={this.Editcourse} />;\n    }):(<span>there no items to show</span>);\n\n    return (\n      <section className=\"App\">\n        <h2>ADD Courses</h2>\n        <Courseform\n          updatefunction={this.updatefunction}\n          addcourse={this.addcourse} cureent={this.state.cureent}\n        />\n        <ul>{courselist}</ul>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}